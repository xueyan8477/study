function* takeIncCount() {
  //takeLatest:不允许并发，监听dispatch里面的type
  yield takeLatest("INC", incCount);
}

React多语言国际化
import intl from 'react-intl-universal';
constructor(){
  super();
  this.state = {
    initDone: false
  }
  this.defaultLocale = "zh-CN";
  this.locales = {
    "en-US": require('../locales/en-US.json'),
    "zh-CN": require('../locales/zh-CN.json'),
  }
}
componentDidMount(){
  intl.init({
    currentLocale: "zh-CN",
    locales: this.locales
  })
    .then(() => {
      this.setState({ initDone: true });
    });
}
render() {
  return (
    <div>
      {
        this.state.initDone &&
        <div>
          {intl.get('SIMPLE')}{/*文本格式输出*/}<br />
          {intl.getHTML('SIMPLE')}{/*支持html格式输出*/}
        </div>
      }
    </div>
  );
}

Immutable
Immutable.js 介绍
Immutable.js是facebook推出的一个类库。是最流行的不可变数据结构的实现之一。
解决原生js引用类型的坑。
引用类型赋值问题：
var obj = {a:1};
var obj2 = obj;
obj2.a = 2;
console.log(obj.a);  // 2
console.log(obj2.a);  // 2
obj2的值改变了，obj的值也改变了。一般原生解决方式就是用深拷贝或是浅拷贝解决。

引用类型比较问题：
var obj = {a:1};
var obj2 = {a:1};
console.log(obj==obj2); //false
引用类型是不能直接比较的，原生方式需要把引用类型转成字符串，再做比较。

Immutable常用API 
Map：原生object转Map对象 (只会转换第一层)
var imMap=Immutable.Map({name:’zhangsan', age:18});
get：获取Map中的数据
imMap.get('name');
set：设置Map中的数据
var imSetData=imMap.set("name","danny2");
console.log(imSetData.get("name"));

fromJS：原生js转immutable对象  (深度转换，会将内部嵌套的对象和数组全部转成immutable)
var imData=Immutable.fromJS({name:'danny', age:18,children:{name:"lisi"}});
getIn：访问嵌套的 fromJS 中的值
console.log(imData.getIn(['children','name']));
setIn：设置嵌套的 fromJS 中的值
var imData=imData.setIn(['children','name'],'张三')
console.log(imData.getIn(['children','name']));
updateIn：设置嵌套的 fromJS 中的值
var result=imData.updateIn(['age'],function(x){
        //console.log(x+20);
        return x+20;
    });
    console.log(result.getIn(['age']));

List：数组的操作
var imList=Immutable.List([1,2,3,4,5,6,7,8,9]);
//count获取总数
for (var i=0;i<imList.count();i++){
      console.log(imList.get(i));
}
var imList=Immutable.List([{age:18},{age:28},{age:38}]);
//count获取总数
for (var i=0;i<imList.count();i++){
      console.log(imList.getIn([i,”age”]));
}

is：对两个对象进行比较
var obj1=Immutable.Map({a:"11",b:"2"});
var obj2=Immutable.Map({a:"11",b:"2"});
console.log(Immutable.is(obj1,obj2));
toJS：immutable对象转原生js  (深度转换，会将内部嵌套的Map,fromJS和List全部转换成原生js)
var imData=Immutable.fromJS({name:'danny', age:18,children:{name:"lisi"}});
console.log(imData.toJS());
