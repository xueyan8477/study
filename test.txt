移动端布局方法
1、响应式布局
利用@media进行断点，在每个断点中编写css
@media (max-width:1000px){
    div{background:blue;}
}
@media (min-width:1000px) and (max-width:1150px){
    div{background: yellow;}
}
@media only screen and (max-width:1150px){
    div{border:solid 1px;}
}
@media not print and (max-width:1150px){
    div{border-radius:50%;}
}
@media还可以用在link标签上，按需加载css
<link rel="stylesheet" href="css/1.css" media='(max-width:500px)'>
平时响应式网站的开发，我都会先对比PC和MOBILE的设计稿，看看有什么区别，然后才进行编写css。通常都是使用flex。宽度尽量用百分比，间距、高度、字体大小使用em，就可以很方便的进行大小的控制。
REM
REM这个单位，会根据html的font-size大小进行转换。
html{font-size:100px;}
p{padding-top:.5rem;}
.5rem = 50px / 100
转换后p的padding-top就是50px了。只要我们进行适当的计算，当前屏幕的宽度，html的font-size是多少px就OK了。
如何计算当前html的font-size值
比如，我们拿到的设计稿是750px，那就设置成当屏幕宽度是750的时候，html的font-size就是100px（当然这个100px你可以随意设置的，我设置成100px只是方便我计算），然后就根据当前屏幕的宽度 / 750 * 100，就得到了当前屏幕宽度的font-size值。
//当前屏幕宽度 / 750 = 当前屏幕宽度的font-size / 100
//代码如下
(function (doc, win) {
    var docEl = doc.documentElement,
    resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize',
    recalc = function () {
      var clientWidth = docEl.clientWidth;
      if (!clientWidth) return;
      docEl.style.fontSize = 100 * (clientWidth / 750) + 'px';
    };
    if (!doc.addEventListener) return;
       win.addEventListener(resizeEvt, recalc, false);
       doc.addEventListener('DOMContentLoaded', recalc, false);
})(document, window);
淘宝移动端REM
这个很简单，只需要加载js就好了
<script src="http://g.tbcdn.cn/mtb/lib-flexible/{{version}}/??flexible_css.js,flexible.js"></script>
然后在css中，将px转为rem就好了。我是用scss的，所以写个函数就好了。
@function s($px) {
    @return ($px / 75) * 1rem;
}
p{
    font-size:s(40);padding-left: s(52);
}
比如p的font-size在750的设计稿是40px，然后s(40)就OK了。
设置viewport中的width
这种方案，就是定死viewport中的width大小。
比如设计稿是750的，然后就在代码上写：
<met name='viewport' content='width=750' />
我们用同样的页面，看看效果是怎么样
第三种方案
链接：第三种方案
效果和第二种是一样的，在手机上看也是。
.top{
    display: flex;align-items:center;padding:50px 0 113.5px;justify-content:space-between;width:100%;
    p{
        font-size:40px;padding-left:52px;
    }
    img{
        width:71.5px;height: 71.5px;display: block;margin-right: 63.5px;
    }
}
而代码是直接使用px的，定死的。

感觉从效果上来看，是很完美的，但是为什么不是这种方法最流行？

@media screen and (max-width:360px){
    .box{color:red;}
}

@media screen and (max-width:520px){
    .box{color:black;}
}

@media screen and (max-width:750px){
    .box{color:yellow;}
}
我在iphone7，小米5s，谷歌浏览器模拟的iphone6plus上，字体颜色都是黄色的。所以@media媒体查询是无法使用的，因为已经将宽度定死了。而REM方案却可以使用媒体查询的。因为移动端有很多奇怪的大小，而且在不同的浏览器或者微信上，高度都是不同的，所以可能会造成间距有很大的问题。
window.screen.width
用js，可以获取当前设备的宽度。
对比三种方式
响应式的优缺点
优点：兼容性好，@media在ie9以上是支持的，PC和MOBILE是同一套代码的，不用分开。
缺点：要写得css相对另外两个多很多，而且各个断点都要做好。css样式会稍微大点，更麻烦。
REM优缺点
优点：能维持能整体的布局效果，移动端兼容性好，不用写多个css代码，而且还可以利用@media进行优化。
缺点：开头要引入一段js代码，单位都要改成rem(font-size可以用px)，计算rem比较麻烦(可以引用预处理器，但是增加了编译过程，相对麻烦了点)。pc和mobile要分开。
设置viewport中的width
优点：和REM相同，而且不用写rem，直接使用px，更加快捷。
缺点：效果可能没rem的好，图片可能会相对模糊，而且无法使用@media进行断点，不同size的手机上显示，高度间距可能会相差很大。
总结
还是看项目需求，再决定使用哪种方案，如果就手机站的话，我使用REM比较多。如果对距离比较精确的话，大量css3动画的，就使用第三种。
2.1固定布局
固定布局是第一次做移动端时最好的选择方式,思路沿用PC端,上手比较快。在标签里把 viewport 加好,然后设想整个网页的宽度为 320px 即可。 其他地方根据 PC 端来布局。 缺点:大屏手机显示网页比较宽,固定布局宽度参照永远是 320px,导致左右两 边会有空白。
demo
2.2流体布局
流布局与固定宽度布局基本不同点就在于对网站尺寸的测量单位不同。固定宽度布局使用的是像素，但是流布局使用的是百分比，看到百分比，你应该想到，这将提供了很强的可塑性和流动性。换句话说，通过设置了百分比，你将不需要考虑设备尺寸或者屏幕宽度大小了，结论就是，你可以为每种情形找到一种可行的方案，因为你的设计尺寸将适应所有的设备尺寸。
demo
2.3FLEX布局
flex也称为弹性布局，他会根据页面的剩余宽度自动分配空间。
2.4栅格布局
bootstrap是一个比较流行的响应式前端框架，利用bootstrap的栅格系统可以实现响应式的移动端布局。
3.常见问题
移动端和PC端的区别
4.解决方案
第一： PC考虑的是浏览器的兼容性，而移动端开发考虑的更多的是手机兼容性，因为目前不管是android手机还是ios手机，一般浏览器使用的都是webkit内核，所以说做移动端开发，更多考虑的应该是手机分辨率的适配，和不同操作系统的略微差异化。
第二： 在部分事件的处理上，移动端多出来的事件是触屏事件，而缺少的是hover事件。 另外包括移动端弹出的手机键盘的处理，这样的问题在PC端都是遇不到的
第三：在移动端有很多网页是可以横屏看也可以竖屏看，并且很多屏幕的饿分辨率都是不一样的，所以只要牵涉到移动端都要考虑用响应式布局
第四： 在动画处理上，PC端由于要考虑IE的兼容性，所以通常使用JS做动画的通用性会更好一些，但是CSS3做了很大的牺牲， 而在手机端，如果要做一些动画、特效等，第一选择是CSS3， 既简单、效率又高。
第五：Pc端的交互是鼠标，键盘的交互而移动端变成了触摸，手势的交互
新闻，社区等可阅读内容较多的场景：px+flex+百分比
对视觉组件种类较多，视觉设计对元素位置的相对关系依赖较强的移动端页面：vw + rem
